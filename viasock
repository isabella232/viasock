#!/usr/bin/env python3


import argparse
import concurrent.futures
import errno
import hashlib
import logging
import logging.handlers
import os
import re
import select
import socket
import socketserver
import subprocess
import sys
import time


### UTILITIES #################################################################


def _now():
    return time.time()


def _mtime(path, default=0):
    """
    Returns the mtime of the file at the specified path. Returns default if
    file does not exist. An OSError is raised if the file cannot be stat'd.
    """
    try:
        return os.stat(path).st_mtime
    except OSError as e:
        if e.errno == errno.ENOENT:
            return default
        raise e


def _makedirs(path):
    try:
        os.makedirs(path)
    except OSError as error:
        if error.errno != errno.EEXIST:
            raise error


def _lines(stream, timeout=None):
    """
    Returns the sequence of lines from a file-like object. If timeout is not
    None, it must be a number. Will then wait for at most that many seconds for
    stream to be ready for reading, otherwise throws TimeoutError.
    """
    buf = b''
    while True:
        if timeout is not None:
            ready, _, _ = select.select((stream,), (), (), timeout)
            if not ready:
                raise TimeoutError()
        chunk = os.read(stream.fileno(), 2048)
        if not chunk:
            if buf:
                yield buf
            break
        buf += chunk
        while True:
            pos = buf.find(b'\n')
            if pos == -1:
                break
            yield buf[:pos + 1]
            buf = buf[pos + 1:]


def _records(stream, terminator_line_pattern, timeout=None):
    """
    Reads from a file-like object, chopping the data up into records terminated
    by lines matching (after chomping off the line terminator) the given
    terminator pattern. Returns a sequence of the records. Raises
    _IncompleteRecord if the last record does not end with a line matching the
    terminator pattern.
    """
    record = b''
    for line in _lines(stream, timeout):
        record += line
        (chomped,) = line.splitlines()
        if terminator_line_pattern.match(chomped):
            yield record
            record = b''
    if record:
        raise _IncompleteRecord()


def _fork(fun, *args):
    """
    Spawns a new process that runs the given function with the given arguments.
    """
    if os.fork() == 0:
        os.setsid()
        try:
            fun(*args)
            os._exit(0)
        except:
            os._exit(1)


class _ViasockError(Exception):

    def __init__(self, message):
        Exception.__init__(self)
        self.message = message


class _ViasockRunError(_ViasockError):
    pass


class _ViasockServerError(_ViasockError):
    pass


class _ViasockClientError(_ViasockError):
    pass


class _IncompleteRecord(Exception):
    pass


### SERVER ####################################################################


class _Handler(socketserver.StreamRequestHandler):

    def handle(self):
        self.server.connection_count += 1
        logging.getLogger('viasock server').info('connection %s start',
            self.server.connection_count)
        try:
            self.wfile.write(self.server.output_prelude)
            try:
                for i, input_record in enumerate(_records(self.rfile,
                    self.server.input_terminator), start=1):
                    logging.getLogger('viasock server').info(
                        'record %s start', i)
                    # Write input to process asynchronously while already
                    # starting to read the output, otherwise writing might
                    # deadlock:
                    def write():
                        self.server.proc.stdin.write(input_record)
                        self.server.proc.stdin.flush()
                    fut_write = self.server.executor.submit(write)
                    try:
                        output_record = next(self.server.output_records)
                    except TimeoutError:
                        raise _ViasockServerError(
                            'process took too long to answer')
                    except StopIteration:
                        raise _ViasockServerError(
                            'process stopped sending output')
                    except _IncompleteRecord:
                        raise _ViasockServerError(
                            'process stopped sending output mid-record')
                    fut_write.result() # raise any exception
                    self.wfile.write(output_record)
                    logging.getLogger('viasock server').info('record %s end',
                                                              i)
            except _IncompleteRecord:
                raise _ViasockServerError(
                    'client did not terminate input record')
        except Exception as e:
            # store any exception so we can give an informative error message
            self.server.exception = e
            # raise it, thereby triggering the server's error handling
            # mechanism
            raise e
        logging.getLogger('viasock server').info('connection %s end',
            self.server.connection_count)


class _Server(socketserver.UnixStreamServer):

    def handle_timeout(self):
        self.shutdown_flag = True

    def handle_error(self, request, client_address):
        self.proc.kill()
        logging.getLogger('viasock server').info('killed process')
        self.shutdown_flag = True


def _server(socket, program, args, input_terminator, output_terminator,
            output_prelude_length, process_timeout, server_timeout, log,
            command_hash):
    # Prevent forked process from holding up pipes etc.:
    os.close(sys.stdout.fileno())
    if log is not None:
        os.close(sys.stderr.fileno())
    # Set up logging:
    logger = logging.getLogger('viasock server')
    logger.setLevel(logging.INFO)
    if log is None:
        handler = logging.StreamHandler()
    else:
        _makedirs(os.path.dirname(log))
        handler = logging.handlers.RotatingFileHandler(log, maxBytes=1024*1024,
                                                       backupCount=5)
    handler.setFormatter(logging.Formatter(
        ('%(asctime)s - %(name)s - {} - %(process)d - %(levelname)s - '
        '%(message)s').format(socket)))
    logger.addHandler(handler)
    # Create executor:
    executor = concurrent.futures.ThreadPoolExecutor(2)
    try: # server cleanup in finally clause
        server = _Server(socket, _Handler)
        logger.info('started')
        # Start process:
        proc = subprocess.Popen([program] + args, stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        # Handle proc.stderr:
        def handle_stderr():
            for line in proc.stderr:
                # Convert line from bytes to str if possible:
                try:
                    line = line.decode()
                except UnicodeDecodeError:
                    pass
                # Chomp line:
                (line,) = line.splitlines()
                # Log line:
                logger.info('{}: {}'.format(program, line))
        fut_handle_stderr = executor.submit(handle_stderr)
        # Read records from proc.stdout:
        output_records = _records(proc.stdout, output_terminator,
                                  process_timeout)
        # Determine the output prelude:
        output_prelude = b''
        for i in range(output_prelude_length):
            output_prelude += next(output_records)
        # Store things needed by _Handler objects in server:
        server.executor = executor
        server.proc = proc
        server.input_terminator = input_terminator
        server.output_prelude = output_prelude
        server.output_records = output_records
        server.exception = None
        server.connection_count = 0
        # Server settings:
        server.shutdown_flag = False
        server.timeout = server_timeout
        # Handle requests
        # We could use the serve_forever and shutdown methods. However,
        # that could lead to a race condition where the process crashes,
        # the handler notices and calls shutdown, but the server starts
        # handling another request before shutting down. So we handle
        # requests in a loop and use a shutdown flag, checking whether
        # it is set after every request:
        while not server.shutdown_flag:
            server.handle_request()
        # Error handling:
        if server.exception:
            proc.kill()
            raise server.exception
        # Clean up process:
        proc.stdin.close()
        try:
            proc.wait(process_timeout)
        except subprocess.TimeoutExpired:
            raise _ViasockServerError('process took too long to exit')
        try:
            fut_handle_stderr.result()
        except BrokenPipeError:
            raise _ViasockServerError(
                'process exited unexpectedly with status {}'.format(
                proc.returncode))
        if proc.returncode != 0:
            raise _ViasockServerError(
                'process exited with status {}'.format(
                proc.returncode))
    except _ViasockServerError as e:
        logger.error(e.message)
        raise RuntimeError()
    except:
        logger.exception('exception')
        raise RuntimeError()
    finally:
        try:
            os.unlink(socket)
        except FileNotFoundError:
            pass
        logger.info('stopped')
        handler.close()


### CLIENT ####################################################################


def _client(socket_path, input_terminator, output_terminator,
            output_prelude_length):
    # Set up logging:
    logger = logging.getLogger('viasock client')
    if not logger.handlers:
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        handler.setFormatter(logging.Formatter(
            '%(asctime)s - %(name)s - %(process)d - %(levelname)s - %(message)s'))
        logger.addHandler(handler)
    # Talk to socket server:
    with socket.socket(socket.AF_UNIX) as sock:
        sock.connect(socket_path)
        wfile = sock.makefile('wb')
        rfile = sock.makefile('rb')
        output_records = _records(rfile, output_terminator)
        try:
            for i in range(output_prelude_length):
                sys.stdout.buffer.write(next(output_records))
                if sys.stdout.buffer.isatty():
                    sys.stdout.buffer.flush()
            for input_record in _records(sys.stdin.buffer, input_terminator):
                wfile.write(input_record)
                wfile.flush()
                try:
                    output_record = next(output_records)
                except StopIteration:
                    logger.error('server stopped sending output')
                    raise RuntimeError()
                except _IncompleteRecord:
                    logger.error('server stopped sending output mid-record')
                    raise RuntimeError()
                sys.stdout.buffer.write(output_record)
                if sys.stdout.buffer.isatty():
                    sys.stdout.buffer.flush()
        except _IncompleteRecord:
            logger.error('input record was not terminated')
            raise RuntimeError()


### RUN #######################################################################


def _command_hash(program, args, process_timeout, input_terminator,
                output_terminator, output_prelude_length, server_timeout, log):
    """
    Returns the name for the socket: a hash of the program, its arguments and
    their modification times (or 0 for arguments that don't resolve to
    existing files). The effect is (barring hash collisons) that no two
    commands use the same socket, and a new socket (and therefore a new server)
    is created when the program or some of the files it reads on startup
    change.
    """
    h = hashlib.md5()
    for x in [program] + args:
        h.update(x.encode('UTF-8'))
        h.update(str(_mtime(x)).encode('UTF-8'))
    h.update(str(process_timeout).encode('UTF-8'))
    h.update(input_terminator.pattern)
    h.update(output_terminator.pattern)
    h.update(bytes(output_prelude_length))
    h.update(str(server_timeout).encode('UTF-8'))
    h.update(repr(log).encode('UTF-8'))
    return h.hexdigest()


def _run(program, args, input_terminator, output_terminator,
         output_prelude_length, process_timeout, server_timeout, log):
    # Set up logging:
    logger = logging.getLogger('viasock run')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(process)d - %(levelname)s - %(message)s'))
    logger.addHandler(handler)
    # Prepare:
    _makedirs('.viasock/sockets')
    command_hash = _command_hash(program, args,
        process_timeout, input_terminator, output_terminator,
        output_prelude_length, server_timeout, log)
    socket = os.path.join('.viasock/sockets', command_hash)
    success = False
    # Use server (spawn it first if needed):
    try:
        _client(socket, input_terminator, output_terminator,
                output_prelude_length)
    except (FileNotFoundError, ConnectionRefusedError) as e:
        # No usable server present, so we need to spawn one.
        if isinstance(e, ConnectionRefusedError):
            # This means the socket file was there, but no server was
            # accepting connections on it. The server probably crashed and
            # left the file behind. So delete it first.
            try:
                logger.warning('Socket file found but connection refused. '
                               'Probably the server had crashed earlier.')
                os.unlink(socket)
            except FileNotFoundError:
                pass
        _fork(_server, socket, program, args, input_terminator,
              output_terminator, output_prelude_length, process_timeout,
              server_timeout, log, command_hash)
        # Give the new server some time to start (or for the one started by
        # another viasock run instance to come up, in which case our server
        # will silently go down because the socket is already in use):
        time.sleep(1)
        # Use the new server or die trying:
        try:
            _client(socket, input_terminator, output_terminator,
                output_prelude_length)
        except (FileNotFoundError, ConnectionRefusedError):
            logger.error('1s after spawning a server, it is still not '
                         'accepting connections. Check %s for error messages.',
                         log)
            raise RuntimeError()


### MAIN ######################################################################


def _main():
    parser = argparse.ArgumentParser(description='Avoid startup overhead by '
        'automagically serverizing your scripts.')
    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand',
                                       description='valid subcommands')
    parser_run = subparsers.add_parser('run',
        help='run a command via a socket server, which is automatically '
             'started if needed (this should be the only subcommand you need)')
    parser_server = subparsers.add_parser('server',
        help='run a command wrapped in a socket server')
    parser_server.add_argument('socket',
        help='the socket file the server should listen on')
    parser_server.add_argument('hash',
        help='a hash of the program and its arguments; server will stop when '
             'they no longer match the hash')
    parser_client = subparsers.add_parser('client',
        help='connect to a socket for input and output')
    parser_client.add_argument('socket',
        help='the socket file the client should connect to')
    for p in (parser_run, parser_server):
        p.add_argument('program', help='the program to run')
        p.add_argument('args', help='the arguments to the program',
                       nargs=argparse.REMAINDER)
        p.add_argument('-w', '--process-timeout', type=float, default=None,
                       help='how long to wait (in s) for the output record '
                       'after sending an input record, before aborting with a '
                       'timeout error -- default is forever')
        p.add_argument('-W', '--server-timeout', type=float, default=60,
                       help='after how many seconds to shut down the server '
                       'when there are no requests -- default is 60')
        p.add_argument('-l', '--log', help='server log file path prefix')
    for p in (parser_run, parser_server, parser_client):
        p.add_argument('-t', '--input-terminator', default=r'',
                       metavar='PATTERN',
                       help='pattern used to recognize an input line that is '
                            'the last of a record -- for 1 line = 1 record '
                            '(default) use \'\' (matches any line); for '
                            'records terminated by an empty line use \'^$\'; '
                            'for EOS on a line by itself as record terminator '
                            'use \'^EOS$\'; etc.')
        p.add_argument('-T', '--output-terminator', default=r'',
                       metavar='PATTERN',
                       help='pattern used to recognize an output line that is '
                            'the last of a record -- for 1 line = 1 record '
                            '(default) use \'\' (matches any line); for '
                            'records terminated by an empty line use \'^$\'; '
                            'for EOS on a line by itself as record terminator '
                            'use \'^EOS$\'; etc.')
        p.add_argument('-P', '--output-prelude', type=int, default=0,
                       metavar='INT',
                       help='how many records at the beginning of the '
                            'output are prelude and should be repeated '
                            'for every client')
    args = parser.parse_args()
    if args.subcommand in ('run', 'server', 'client'):
        input_terminator = re.compile(args.input_terminator.encode())
        output_terminator = re.compile(args.output_terminator.encode())
    try:
        if args.subcommand == 'run':
            _run(args.program, args.args, input_terminator, output_terminator,
                 args.output_prelude, args.process_timeout,
                 args.server_timeout, args.log)
        elif args.subcommand == 'server':
                _server(args.socket, args.program, args.args, input_terminator,
                        output_terminator, args.output_prelude,
                        args.process_timeout, args.server_timeout, args.log,
                        args.hash)
        elif args.subcommand == 'client':
            _client(args.socket, input_terminator, output_terminator,
                    args.output_prelude)
        else:
            parser.print_help()
    except:
        sys.exit(1)


if __name__ == '__main__':
    _main()
